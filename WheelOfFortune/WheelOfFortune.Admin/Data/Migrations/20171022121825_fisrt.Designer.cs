// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WheelOfFortune.Admin.Data;
using WheelOfFortune.Admin.Models;

namespace WheelOfFortune.Admin.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20171022121825_fisrt")]
    partial class fisrt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<float>("Balance");

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("LastLogin");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.DepositEntry", b =>
                {
                    b.Property<int>("HistoryEntryId");

                    b.Property<int>("VoucherId");

                    b.HasKey("HistoryEntryId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("DepositEntries");
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.HistoryEntry", b =>
                {
                    b.Property<int>("HistoryEntryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<int>("HistoryEntryTypeId");

                    b.Property<DateTime>("TimeOccurred");

                    b.HasKey("HistoryEntryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("HistoryEntries");
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.SpinEntry", b =>
                {
                    b.Property<int>("HistoryEntryId");

                    b.Property<float>("BetAmount");

                    b.Property<float>("ResultAmount");

                    b.HasKey("HistoryEntryId");

                    b.ToTable("SpinEntries");
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("CreditAmount");

                    b.Property<bool>("IsUsed");

                    b.Property<int>("Status");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.HasKey("VoucherId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.Wheel", b =>
                {
                    b.Property<int>("WheelId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("WheelDescription");

                    b.Property<string>("WheelName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("WheelId");

                    b.ToTable("Wheels");
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.WheelSlice", b =>
                {
                    b.Property<int>("SliceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorHexCode")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<float>("Factor");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("ProbabilityPercent");

                    b.Property<int>("SliceOrder");

                    b.Property<int?>("WheelId");

                    b.HasKey("SliceId");

                    b.HasIndex("WheelId");

                    b.ToTable("WheelSlices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WheelOfFortune.Admin.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WheelOfFortune.Admin.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WheelOfFortune.Admin.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WheelOfFortune.Admin.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.DepositEntry", b =>
                {
                    b.HasOne("WheelOfFortune.Admin.Models.HistoryEntry", "BelongsToHistoryEntry")
                        .WithMany()
                        .HasForeignKey("HistoryEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WheelOfFortune.Admin.Models.Voucher", "BelongsToVoucherEntry")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.HistoryEntry", b =>
                {
                    b.HasOne("WheelOfFortune.Admin.Models.ApplicationUser", "CreatedBy")
                        .WithMany("HistoryEntries")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.SpinEntry", b =>
                {
                    b.HasOne("WheelOfFortune.Admin.Models.HistoryEntry", "BelongsToHistoryEntry")
                        .WithMany()
                        .HasForeignKey("HistoryEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WheelOfFortune.Admin.Models.WheelSlice", b =>
                {
                    b.HasOne("WheelOfFortune.Admin.Models.Wheel", "ContainerWheel")
                        .WithMany("Slices")
                        .HasForeignKey("WheelId");
                });
#pragma warning restore 612, 618
        }
    }
}
