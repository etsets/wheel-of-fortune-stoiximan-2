@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using WheelOfFortune.Admin.Models
@using WheelOfFortune.Admin.Additionals

@inject SignInManager<ApplicationUser> _signInManager
@inject UserManager<ApplicationUser> _userManager

@model PaginatedList<WheelOfFortune.Admin.Models.ApplicationUser>

@{
    ViewData["Title"] = "List of Registered Gamers";
}

<h2>@ViewData["Title"]</h2>


<table class="table">
    <thead>
        <tr>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Username</a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["EmailSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Email</a>
                </th>
                <th>
                    Email confirmed
                </th>
                <th>
                    Phone number
                </th>
                <th>
                    2 factor enabled
                </th>
                <th>
                    Lockout end
                </th>
                <th>
                    Lockout enabled
                </th>
                <th>
                    Access failed count
                </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
    if (!await _userManager.IsInRoleAsync(item, "Admin"))
    {

        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.UserName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EmailConfirmed)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TwoFactorEnabled)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LockoutEnd)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LockoutEnabled)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AccessFailedCount)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Info</a> |
                <a asp-action="History" asp-route-id="@item.Id">History</a> 
            </td>
        </tr>
    }
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
