@model RegisterViewModel
@{
    ViewData["Title"] = "Register";
}
<h2>@ViewData["Title"]</h2>
<div class="row">
    <form asp-route-returnUrl="@ViewData["ReturnUrl"]" method="post">
        <h4>Create a new account.</h4>
        <hr />
        <div class="col-md-4">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Firstname"></label>
                <input asp-for="Firstname" class="form-control" />
                <span asp-validation-for="Firstname" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Lastname"></label>
                <input asp-for="Lastname" class="form-control" />
                <span asp-validation-for="Lastname" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ConfirmPassword"></label>
                <input asp-for="ConfirmPassword" class="form-control" />
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-4">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Birthdate"></label>
                <input asp-for="Birthdate" class="form-control" />
                <span asp-validation-for="Birthdate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Photo"></label>
                <input asp-for="Photo" class="form-control" />
                <span asp-validation-for="Photo" class="text-danger"></span>
            </div>
        </div>
        <button type="submit" class="btn btn-default">Register</button>
    </form>
    <div class="col-md-4">
        <h4> </h4>
        <hr />
        <h4>Upload photo</h4>
        <div>
            <form action="/api/images/upload"
                  class="dropzone needsclick dz-clickable"
                  id="image-upload"
                  method="post"
                  enctype="multipart/form">
                <div class="dz-message needsclick">
                    <span class="note needsclick">
                        Drop files here or click to upload.
                    </span>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/js/blueimp-gallery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
<script>
    // init gallery for later use
    var gallery;

    // Grab links for images from backend api
    function fetchImageLinks() {
        // Fetch images
        $.get("api/Images/thumbnails", function (fetchedImageLinks) {
            console.log(fetchedImageLinks)

            // Check if anything is in there
            if (_.isEmpty(fetchedImageLinks)) {
                console.log('empty fetched')
                // do nothing
            } else {
                // Check if we have a gallery initialized
                if (_.isEmpty(gallery)) {
                    // initialize gallery
                    gallery = blueimp.Gallery(
                        fetchedImageLinks, // gallery links array
                        {
                            container: '#blueimp-gallery-carousel',
                            carousel: true
                        } // gallery options
                    );
                } else {
                    // check if images are equal to array
                    console.log('currently in gallery:')
                    console.log(gallery.list)
                    var imageLinksEqual = _.isEqual(_.sortBy(gallery.list.map(s => s.split("?")[0])), _.sortBy(fetchedImageLinks.map(s => s.split("?")[0])))
                    if (imageLinksEqual) {
                        console.log('images arr are equal')
                        // do nothing
                    } else {
                        console.log('images arr are not equal')

                        // update gallery with new image urls. Only compare actual url without SAS token query string
                        var newImageLinks = _.difference(fetchedImageLinks.map(s => s.split("?")[0]), gallery.list.map(s => s.split("?")[0]))

                        console.log('differene is: ')
                        console.log(newImageLinks)
                        // Only add new images
                        gallery.add(newImageLinks);

                        // Force image load
                        //gallery.next();
                    }
                }
            }
        });
    }

    // Start first interval
    fetchImageLinks()

    setInterval(function () {
        fetchImageLinks()
    }, 5000)

    /* Dropzone */
    // "imageUpload" is the camelized version of the HTML element's ID
    Dropzone.options.imageUpload = {
        maxFiles: 1,
        maxFilesize: 10,
        acceptedFiles: "image/*",
        addRemoveLinks: false,
        uploadMultiple: false,
        paramName: "files", // The name that will be used to transfer the file
        dictDefaultMessage: "Click to Upload",
        addRemoveLinks: true, // Allows for cancellation of file upload and remove thumbnail
        init: function () {
            myDropzone = this;
            myDropzone.on("success", function (file, response) {
                console.log("Success");
            });
        }
    };
</script>
